{$assertions on}

var
  TreePoints: TPointArray := [
    TPoint.Create(63,11),
    TPoint.Create(23,23),
    TPoint.Create(79,23),
    TPoint.Create(91,23),
    TPoint.Create(55,31),
    TPoint.Create(35,35),
    TPoint.Create(11,55),
    TPoint.Create(19,63)
  ];

var
  dtm: TDTM;
  img, imgRotated: TImage;
  TPA: TPointArray;
  degs: TDoubleArray;
begin
  dtm.FromString('DTM:eJxjY2Bg2MLFwLARiLcD8TYg3gTEO4BYnZmBQQWKtYFYC4g1gDhAj5tB34AdTMMwiE8qAAD40Aht');
  img := TImage.CreateFromString('IMG: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');
  imgRotated := img.RotateNN(DegToRad(270), False);

  Target.SetImage(imgRotated);

  // Find all, entire client
  TPA := Finder.FindDTMRotatedEx(DTM, 89,91,1, degs, -1);
  TPA := TPA.Unique();
  Assert(TPA.Length() = 8);
  Assert(TPA[0] = TreePoints[0]);
  Assert(TPA[1] = TreePoints[1]);
  Assert(TPA[2] = TreePoints[2]);
  Assert(TPA[3] = TreePoints[3]);
  Assert(TPA[4] = TreePoints[4]);
  Assert(TPA[5] = TreePoints[5]);
  Assert(TPA[6] = TreePoints[6]);
  Assert(TPA[7] = TreePoints[7]);

  Degs := Degs.Unique().Sorted();
  Assert(Degs.Length() = 3);
  Assert(Degs[0] = 89);
  Assert(Degs[1] = 91);
  Assert(Degs[2] = 92);

  // find all, area
  TPA := Finder.FindDTMRotatedEx(DTM, 89,91,1, degs, -1, [56,5,95,28]);
  TPA := TPA.Unique();
  Assert(TPA.Length() = 3);
  Assert(TPA[0] = TreePoints[0]);
  Assert(TPA[1] = TreePoints[2]);
  Assert(TPA[2] = TreePoints[3]);

  Degs := Degs.Unique().Sorted();
  Assert(Degs.Length() = 3);
  Assert(Degs[0] = 89);
  Assert(Degs[1] = 91);
  Assert(Degs[2] = 92);

  img.Free();
  imgRotated.Free();
end;
