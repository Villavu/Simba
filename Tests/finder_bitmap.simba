{$assertions on}

var
  TreePoints: TPointArray := [
    TPoint.Create(19, 4),
    TPoint.Create(19, 16),
    TPoint.Create(7, 32),
    TPoint.Create(27, 40),
    TPoint.Create(31, 60),
    TPoint.Create(19, 72),
    TPoint.Create(59, 76),
    TPoint.Create(51, 84)
  ];

var
  //img: TImage := TImage.CreateFromString(100, 100, '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');
  img := TImage.CreateFromString('IMG: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');
  templ := TImage.CreateFromString('IMG:eJwrzM9MY2Bg4AJhZoZT//QN2P8B2Qf+Behxmx6QMD2obCpxwFT5gOnBnY9BfGUgPCB9QFkCKKRseghIHgBJAiUOmR6SAIqbHlMGajjNAAGMAKwxHfU=');
  templBrightnessed: TImage;
  TPA: TPointArray;
  P: TPoint;
begin
  Target.SetImage(img);

  // find all, entire client
  TPA := Finder.FindImageEx(templ, 0, -1);
  Assert(TPA.Length() = 8);
  Assert(TPA[0] = TreePoints[0]);
  Assert(TPA[1] = TreePoints[1]);
  Assert(TPA[2] = TreePoints[2]);
  Assert(TPA[3] = TreePoints[3]);
  Assert(TPA[4] = TreePoints[4]);
  Assert(TPA[5] = TreePoints[5]);
  Assert(TPA[6] = TreePoints[6]);
  Assert(TPA[7] = TreePoints[7]);

  // find all, area
  TPA := Finder.FindImageEx(templ, 0, -1, [24, 37, 45, 71]);
  Assert(TPA.Length() = 2);
  Assert(TPA[0] = TreePoints[3]);
  Assert(TPA[1] = TreePoints[4]);

  // find one
  P := Finder.FindImage(templ, 0);
  Assert(TreePoints.Contains(P));


  // find one, area
  P := Finder.FindImage(templ, 0, [24, 37, 45, 71]);
  Assert(TreePoints.Contains(P));

  // test tolerance
  templBrightnessed := templ.Brightness(25);
  templBrightnessed.SetTransparentColor(1644825);

  // find all with tolerance, entire client
  TPA := Finder.FindImageEx(templBrightnessed, 10, -1);
  Assert(TPA.Length() = 8);
  Assert(TPA[0] = TreePoints[0]);
  Assert(TPA[1] = TreePoints[1]);
  Assert(TPA[2] = TreePoints[2]);
  Assert(TPA[3] = TreePoints[3]);
  Assert(TPA[4] = TreePoints[4]);
  Assert(TPA[5] = TreePoints[5]);
  Assert(TPA[6] = TreePoints[6]);
  Assert(TPA[7] = TreePoints[7]);

  // find all with (too low) tolerance, entire client
  TPA := Finder.FindImageEx(templBrightnessed, 5);
  Assert(TPA.Length() = 0);

  img.Free();
  templ.Free();
  templBrightnessed.Free();
end.
