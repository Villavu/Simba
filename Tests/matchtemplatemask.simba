{$assertions on}

var
  img, templ: TImage;

procedure test(formula: ETMFormula; minLoc, maxLoc: TPoint; minValue, maxValue: Single = 0);
var
  mat: TSingleMatrix;
begin
  try
    mat := MatchTemplateMask(img.ToMatrix(), templ.ToMatrix(), formula);
    Assert(mat.ArgMin() = minLoc);
    Assert(mat.ArgMax() = maxLoc);

    if (minValue <> 0) and (maxValue <> 0) then
    begin
      Assert(Abs(mat[minLoc.Y, minLoc.X] - minValue) <= 0.05);
      Assert(Abs(mat[maxLoc.Y, maxLoc.X] - maxValue) <= 0.05);
    end;
  except
    WriteLn(Formula, ' :: ', mat.ArgMin(), ', ', mat.ArgMax(), ', ', Round(mat[mat.ArgMin().Y, mat.ArgMin().X], 1), ', ', Round(mat[mat.ArgMax().Y, mat.ArgMax().X], 1));
    raise;
  end;
end;

procedure testCache(formula: ETMFormula; minLoc, maxLoc: TPoint; minValue, maxValue: Single = 0);
var
  mat: TSingleMatrix;
  cache: TMatchTemplateCache;
begin
  try
    cache := TMatchTemplateCache.Create(img.toMatrix(), templ.ToMatrix(), formula);
    mat := MatchTemplateMask(cache, templ.ToMatrix(), formula);
    Assert(mat.ArgMin() = minLoc);
    Assert(mat.ArgMax() = maxLoc);

    if (minValue <> 0) and (maxValue <> 0) then
    begin
      Assert(Abs(mat[minLoc.Y, minLoc.X] - minValue) <= 0.05);
      Assert(Abs(mat[maxLoc.Y, maxLoc.X] - maxValue) <= 0.05);
    end;
  except
    WriteLn(Formula, ' :: ', mat.ArgMin(), ', ', mat.ArgMax(), ', ', Round(mat[mat.ArgMin().Y, mat.ArgMin().X], 1), ', ', Round(mat[mat.ArgMax().Y, mat.ArgMax().X], 1));
    raise;
  finally
    cache.free();
  end;
end;

begin
  img := TImage.CreateFromString('IMG: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');
  templ := img.Copy(50, 50, 100, 100);
  templ.DrawCircleInverted(templ.GetCenter(), 20, 0);

  try
    test(TM_CCOEFF, [83, 1], [50, 50]);
    test(TM_CCOEFF_NORMED, [24, 19], [50, 50], -0.2, 1);

    test(TM_CCORR, [80, 14], [53, 0]);
    test(TM_CCORR_NORMED, [77, 1], [50, 50], 0.8, 1);

    test(TM_SQDIFF, [50, 50], [54, 0]);
    test(TM_SQDIFF_NORMED, [50, 50], [59, 0], 0, 0.4);

    testCache(TM_CCOEFF, [83, 1], [50, 50]);
    testCache(TM_CCOEFF_NORMED, [24, 19], [50, 50], -0.2, 1);

    testCache(TM_CCORR, [80, 14], [53, 0]);
    testCache(TM_CCORR_NORMED, [77, 1], [50, 50], 0.8, 1);

    testCache(TM_SQDIFF, [50, 50], [54, 0]);
    testCache(TM_SQDIFF_NORMED, [50, 50], [59, 0], 0, 0.4);
  finally
    img.free();
    templ.free();
  end;
end.
