{$assertions on}

procedure Test(var List: TStringMap);
begin
  List.Add('one', '1');
  List.Add('two', '2');
  List.Add('two', '2.0');
  List.Add('three', '3');

  Assert(List.Count = 4);
  Assert(List.IndexOf('zero') = -1);
  Assert(List.IndexOf('one') > -1);
  Assert(List.IndexOf('two') > -1);
  Assert(List.IndexOf('three') > -1);
  Assert(Length(List.IndicesOf('two')) = 2);

  Assert(List.GetValue('one') = '1');
  Assert(List.GetValue('three') = '3');
  Assert(Length(List.GetValues('two')) = 2);

  List.DeleteAll('two');
  Assert(Length(List.GetValues('two')) = 0);

  List.Delete('three');
  Assert(List.IndexOf('three') = -1);

  Assert(List.Count = 1);
  Assert(List.GetPair(0) = ['one', '1']);
  Assert(List.GetKey(0) = 'one');
end;

var
  List: TStringMap;
begin
  List.Clear();
  List.SetSorted(True);
  Test(List);

  List.Clear();
  List.SetSorted(False);
  Test(List);

  List.Clear();
  List.SetCaseSens(True);
  List.Add('HELLO', 'WORLD');
  Assert(List.Exists('HELLO'));
  Assert(not List.Exists('hello'));

  Assert(List.GetValue('abc') = '');
  List.InvalidVal := 'Nope';
  Assert(List.GetValue('abc') = 'Nope');
end;
