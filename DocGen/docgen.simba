// To run to locally build docs you need:
//
// 1) Python installed, on PATH too so Simba can execute "Python"
// 2) "sphinx" and "sphinx_rtd_theme" installed:
//      pip3 install sphinx sphinx_rtd_theme

var
  SourceFiles: array of record
    FileName: String;
    Title: String;
  end;

begin
  SourceFiles += ['Source\script\imports\simba\simba.import_colormath.pas',     'Color Math'     ];
  SourceFiles += ['Source\script\imports\simba\simba.import_point.pas',         'TPoint'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_tpa.pas',           'TPointArray'    ];
  SourceFiles += ['Source\script\imports\simba\simba.import_atpa.pas',          'T2DPointArray'  ];
  SourceFiles += ['Source\script\imports\simba\simba.import_box.pas',           'TBox'           ];
  SourceFiles += ['Source\script\imports\simba\simba.import_boxarray.pas',      'TBoxArray'      ];
  SourceFiles += ['Source\script\imports\simba\simba.import_quad.pas',          'TQuad'          ];
  SourceFiles += ['Source\script\imports\simba\simba.import_windowhandle.pas',  'TWindowHandle'  ];
  SourceFiles += ['Source\script\imports\simba\simba.import_debugimage.pas',    'Debug Image'    ];
  SourceFiles += ['Source\script\imports\simba\simba.import_variant.pas',       'Variant'        ];
  SourceFiles += ['Source\script\imports\simba\simba.import_script.pas',        'Script'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_random.pas',        'Random'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_input.pas',         'Input'          ];
  SourceFiles += ['Source\script\imports\simba\simba.import_finder.pas',        'Finder'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_target.pas',        'Target'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_web.pas',           'Web'            ];
  SourceFiles += ['Source\script\imports\simba\simba.import_file.pas',          'File'           ];
  SourceFiles += ['Source\script\imports\simba\simba.import_encoding.pas',      'Encoding'       ];
  SourceFiles += ['Source\script\imports\simba\simba.import_timing.pas',        'Timing'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_string.pas',        'String'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_process.pas',       'Process'        ];
  SourceFiles += ['Source\script\imports\simba\simba.import_math.pas',          'Math'           ];
  SourceFiles += ['Source\script\imports\simba\simba.import_matchtemplate.pas', 'Match Template' ];
  SourceFiles += ['Source\script\imports\simba\simba.import_misc.pas',          'Misc'           ];
  SourceFiles += ['Source\script\imports\simba\simba.import_matrix.pas',        'Matrix'         ];
  SourceFiles += ['Source\script\imports\simba\simba.import_dialogs.pas',       'Dialogs'       ];

  SourceFiles += ['Source\script\imports\simbaclasses\simba.import_class_json.pas',   'JSON'     ];
  SourceFiles += ['Source\script\imports\simbaclasses\simba.import_class_bitmap.pas', 'Image'    ];
  SourceFiles += ['Source\script\imports\simbaclasses\simba.import_class_dtm.pas',    'DTM'      ];
end;

const
  OUTPUT_DIR = 'DocGen/output/';
  INPUT_DIR  = 'DocGen/input/';

  CONFIG_FILE = "
from datetime import datetime

project = 'Simba'
author = 'Simba'
copyright = str(datetime.now().year) + ', Simba'
templates_path = ['.']
pygments_style='sphinx'
source_suffix = '.rst'
master_doc = 'index'
highlight_language = 'pascal'
html_favicon = '../images/simba.png'
html_theme = 'sphinx_rtd_theme'
extensions = [
    'sphinx.ext.githubpages',
]
";

  TEMPLATE_FILE = "
{% extends '!layout.html' %}
  {% block footer %} {{ super() }}
  <style>
         .wy-nav-content { min-width: 85%; }
  </style>
{% endblock %}";

  TOC_FILE = "
Welcome to Simba documentation
******************************
.. toctree::

";

function Indent(Str: String; Size: Integer): String;
var
  Line: String;
begin
  for Line in Str.Split(LINE_SEP) do
    Result := Result + (#32 * Size) + Line + LINE_SEP;
end;

// Code block to sphinx .. code-block::
{
```
This is a code block
```
}
procedure MakeCodeBlock(var Str: String);
var
  Start, Stop: Integer;
  Block: String;
begin
  Start := 1;
  while ((Start := Str.IndexOf('```', Start)) > 0) do
  begin
    Stop := Str.IndexOf('```', Start + 3) + 3;
    if (Stop <= 3) then
      Break;

    Block := Str.CopyRange(Start, Stop);

    Str.Delete(Start, Block.Length());
    Str.Insert('.. code-block::' + (LINE_SEP * 2) + Indent(Block.Trim([#96, #10, #13]), 4), Start);

    Start := Stop;
  end;
end;

//Inline code to sphinx :code:
{
 This is `inline` code
}
procedure MakeInlineCode(var Str: String);
var
  Start, Stop: Integer;
  Block: String;
begin
  Start := 1;
  while ((Start := Str.IndexOf('`', Start)) > 0) do
  begin
    Stop := Str.IndexOf('`', Start + 1) + 1;
    if (Stop <= 1) then
      Break;

    Str.Insert(':code:', Start);

    Start := Stop + 6;
  end;
end;

// Header to code block
{
Test
****
procedure Test;
}
procedure MakeCodeHeaders(var Str: String);
var
  I: Integer;
  Lines: TStringArray;
begin
  Lines := Str.Split(LINE_SEP);
  while (I < Length(Lines)) do
  begin
    if Lines[I].StartsWith('> ') then
    begin
      Lines[I].Delete(1,2);
      Lines.Insert('```', I);
      Lines.Insert('```', I+2);
      Inc(I,2);
    end;
    Inc(I);
  end;

  Str := LINE_SEP.Join(Lines);
end;

function ParseComments(FileName, Name: String): Boolean;
var
  Str, Comments: String;
begin
  for Str in FileRead(FileName).BetweenAll('(*', '*)') do
  begin
    if (Comments <> '') then
      Comments += LINE_SEP + '----' + LINE_SEP;
    Comments += Str;
  end;

  Result := Length(Comments) > 0;
  if Result then
  begin
    MakeCodeHeaders(Comments);
    MakeCodeBlock(Comments);
    MakeInlineCode(Comments);

    Comments := Comments.Replace('Image::', '.. figure::');
    Comments := Comments.Replace('Note::', '.. note::');
    Comments := Comments.Replace('Warning::', '.. warning::');

    FileWrite(INPUT_DIR + Name + '.rst', Comments);
    FileAppend(INPUT_DIR + 'index.rst', '   ' + Name + LINE_SEP);
  end;
end;

var
  Str: String;
  I: Integer;
begin
  ClearSimbaOutput();

  DirCreate(OUTPUT_DIR);
  DirDelete(OUTPUT_DIR, True);
  DirCreate(INPUT_DIR);
  DirDelete(INPUT_DIR, True);

  FileWrite(INPUT_DIR + 'index.rst', TOC_FILE);
  FileWrite(INPUT_DIR + 'conf.py', CONFIG_FILE);
  FileWrite(INPUT_DIR + 'layout.html', TEMPLATE_FILE);

  for I := 0 to High(SourceFiles) do
    ParseComments(SourceFiles[I].FileName, SourceFiles[I].Title);

  WriteLn('Sphinx exit code: ', RunCommand('sphinx-build', ['-q', '-E', INPUT_DIR, OUTPUT_DIR], Str));
  if (Str <> '') then
    WriteLn(Str);

  WriteLn('Link: "' + PathNormalize(OUTPUT_DIR) + 'index.html"');
end.
