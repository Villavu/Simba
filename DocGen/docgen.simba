// To run to locally build docs you need:
//
// 1) Python installed which is on the systems PATH too so Simba can execute "Python"
// 2) "sphinx" and "furo" installed: pip3 install sphinx furo

// Notes:
//
// The theme used is furo > https://pradyunsg.me/furo/quickstart/
//
// This script extracts comments from `SourceFiles` and adds them to .rst files,
// where sphinx generates static html files.
//
// This script also parsers some more prettier syntax such as:
//
// - Triple backtick -> .. code-block::
// - Single backtick -> :code:
// - Greater than (at the beginning of line) -> .. code-block::
//
// Example documentation comment:

(*
SomeMethod
~~~~~~~~~~
> procedure SomeMethod(SomeInt: Integer);

This method does something.
Use it like:

```
SomeMethod(123)
```
*)

const
  SOURCE_SEARCH_PATHS = [
    'Source\script\imports\simba\',
    'Source\script\imports\simbaclasses\'
  ];

function Indent(Str: String; Size: Integer): String;
var
  Line: String;
begin
  for Line in Str.Split(LINE_SEP) do
    Result := Result + (#32 * Size) + Line + LINE_SEP;
end;

// Code block to sphinx .. code-block::
{
```
This is a code block
```
}
procedure MakeCodeBlock(var Str: String);
var
  Start, Stop: Integer;
  Block: String;
begin
  Start := 1;
  while ((Start := Str.IndexOf('```', Start)) > 0) do
  begin
    Stop := Str.IndexOf('```', Start + 3) + 3;
    if (Stop <= 3) then
      Break;

    Block := Str.CopyRange(Start, Stop);

    Str.Delete(Start, Block.Length());
    Str.Insert('.. code-block::' + (LINE_SEP * 2) + Indent(Block.Trim([#96, #10, #13]), 4), Start);

    Start := Stop;
  end;
end;

//Inline code to sphinx :code:
{
 This is `inline` code
}
procedure MakeInlineCode(var Str: String);
var
  Start, Stop: Integer;
begin
  Start := 1;
  while ((Start := Str.IndexOf('`', Start)) > 0) do
  begin
    Stop := Str.IndexOf('`', Start + 1) + 1;
    if (Stop <= 1) then
      Break;

    Str.Insert(':code:', Start);

    Start := Stop + 6;
  end;
end;

// Header to code block
{
Test
~~~~
> procedure Test;
}
procedure MakeCodeHeaders(var Str: String);
var
  I: Integer;
  Lines: TStringArray;
begin
  Lines := Str.Split(LINE_SEP);
  while (I < Length(Lines)) do
  begin
    if Lines[I].StartsWith('> ') then
    begin
      Lines[I].Delete(1,2);
      Lines.Insert('```', I);
      Lines.Insert('```', I+2);
      Inc(I,2);
    end;
    Inc(I);
  end;

  Str := LINE_SEP.Join(Lines);
end;

function FindSourceFile(FileName: String): String;
var
  SearchPath: String;
  Matches: TStringArray;
begin
  for SearchPath in SOURCE_SEARCH_PATHS do
  begin
    Matches := DirSearch(SearchPath, FileName + '*');
    if (Matches <> []) then
      Exit(Matches[0]);
  end;

  WriteLn('Source file not found: ', FileName);
end;

function ParseSourceFile(FileName, Name: String): Boolean;
var
  Str, Comments: String;
begin
  FileName := FindSourceFile(FileName);
  if not FileExists(FileName) then
    Exit;

  for Str in FileRead(FileName).BetweenAll('(*', '*)') do
  begin
    if (Comments <> '') then
      Comments += LINE_SEP + '----' + LINE_SEP;
    Comments += Str;
  end;

  Result := Length(Comments) > 0;
  if Result then
  begin
    MakeCodeHeaders(Comments);
    MakeCodeBlock(Comments);
    MakeInlineCode(Comments);

    Comments := Comments.Replace('Image::', '.. figure::');
    Comments := Comments.Replace('Note::', '.. note::');
    Comments := Comments.Replace('Warning::', '.. warning::');

    FileWrite('DocGen/source/api/' + Name + '.rst', Comments);
  end;
end;

// Delete old api generation
procedure CleanAPI;
var
  FileName: String;
begin
  for FileName in DirList('DocGen/source/api/') do
    if (not (PathExtractName(FileName) in ['index.rst'])) then
      FileDelete(FileName);
end;

procedure BuildAPI;
begin
  ParseSourceFile('simba.import_system',        'System'         );
  ParseSourceFile('simba.import_colormath',     'Color Math'     );
  ParseSourceFile('simba.import_point',         'TPoint'         );
  ParseSourceFile('simba.import_tpa',           'TPointArray'    );
  ParseSourceFile('simba.import_atpa',          'T2DPointArray'  );
  ParseSourceFile('simba.import_box',           'TBox'           );
  ParseSourceFile('simba.import_boxarray',      'TBoxArray'      );
  ParseSourceFile('simba.import_quad',          'TQuad'          );
  ParseSourceFile('simba.import_windowhandle',  'TWindowHandle'  );
  ParseSourceFile('simba.import_debugimage',    'Debug Image'    );
  ParseSourceFile('simba.import_variant',       'Variant'        );
  ParseSourceFile('simba.import_script',        'Script'         );
  ParseSourceFile('simba.import_random',        'Random'         );
  ParseSourceFile('simba.import_input',         'Input'          );
  ParseSourceFile('simba.import_finder',        'Finder'         );
  ParseSourceFile('simba.import_target',        'Target'         );
  ParseSourceFile('simba.import_web',           'Web'            );
  ParseSourceFile('simba.import_file',          'File'           );
  ParseSourceFile('simba.import_encoding',      'Encoding'       );
  ParseSourceFile('simba.import_timing',        'Timing'         );
  ParseSourceFile('simba.import_string',        'String'         );
  ParseSourceFile('simba.import_process',       'Process'        );
  ParseSourceFile('simba.import_math',          'Math'           );
  ParseSourceFile('simba.import_matchtemplate', 'Match Template' );
  ParseSourceFile('simba.import_misc',          'Misc'           );
  ParseSourceFile('simba.import_matrix',        'Matrix'         );
  ParseSourceFile('simba.import_dialogs',       'Dialogs'        );

  ParseSourceFile('simba.import_class_json',  'JSON'  );
  ParseSourceFile('simba.import_class_image', 'Image' );
  ParseSourceFile('simba.import_class_dtm',   'DTM'   );
end;

procedure H2ToH3(dir: String);
var
  FileName: String;
begin
  for FileName in DirList(dir) do
    FileWrite(FileName, FileRead(FileName).Replace('h2','h3', [rfReplaceAll]));
end;

var
  SphinxOutput: String;
begin
  ClearSimbaOutput();

  CleanAPI();
  BuildAPI();

  WriteLn('Sphinx exit code: ', RunCommand('sphinx-build', ['-q', '-E', 'DocGen/source', 'DocGen/build'], SphinxOutput));
  if (SphinxOutput <> '') then
    WriteLn(SphinxOutput);

  WriteLn('Link: "' + PathNormalize('DocGen/build/index.html') + '"');

  // it looks a lot better like this...
  H2ToH3('DocGen/build/api');
end.
