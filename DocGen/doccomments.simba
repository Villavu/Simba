// some monstrosity

var
  Contents, NewContents, Import, WrapperName, Header, DocComment, Line: String;
  I: Integer;
  Map: array of record
    WrapperName: String;
    DocComment: String;
  end;

  Params: TStringArray;
  ReadWrapperName, WriteWrapperName: String;

procedure Add(Header, WrapperName: String);
var
  HeaderName, Doc: String;
begin
  // Strip overload
  if Header.EndsWith('overload') or Header.EndsWith('overload;') then
    Header := Header.Before('overload');
  Header := Header.Trim();
  if not Header.EndsWith(';') then
    Header += ';';
  HeaderName := Header.After(' ');
  HeaderName := HeaderName.CopyRange(1, HeaderName.IndexOfAny(['(',':',';']) - 1);

  Doc := '(*%s%s%s%s%s> %s%s*)'.format([LINE_SEP, HeaderName, LINE_SEP, '~' * Length(HeaderName), LINE_SEP, Header, LINE_SEP]);
  Map += [WrapperName, Doc];
end;

begin
  Contents := FileRead('Source/script/imports/simba/simba.import_misc.pas');

  for DocComment in Contents.BetweenAll('(*','*)') do
  begin
    if DocComment.Contains('===') then // section title
      Continue;
    Contents := Contents.Replace('(*' + DocComment + '*)' + LINE_SEP, '');
  end;

  for Import in Contents.BetweenAll("addClassVar(", ");" + LINE_SEP) do
  begin
    ReadWrapperName := Import.Between('@', '_Read');
    WriteWrapperName := Import.Between('_Read, @', '_Write');

    Params := Import.BetweenAll(#39, #39);
    Params.RemoveAll(', ');

    if (ReadWrapperName <> '') then
      Add('function ' + Params[0] + '.Get' + Params[1] + ': ' + Params[2], ReadWrapperName + '_Read');
     if (WriteWrapperName <> '') then
      Add('procedure ' + Params[0] + '.Set' + Params[1] + '(Value: ' + Params[2] + ')', WriteWrapperName + '_Write');
  end;

  for Import in Contents.BetweenAll("addGlobalFunc(", ");" + LINE_SEP) do
  begin
    WrapperName := Import.After('@');
    Header := Import.Between(#39, #39);
    if (WrapperName <> '') then
      Add(Header, WrapperName);
  end;

  for Line in Contents.Split(LINE_SEP) do
  begin
    for I := 0 to High(Map) do
      if (Line.Contains('procedure ' + Map[i].WrapperName + '(')) then
      begin
        NewContents += Map[I].DocComment + LINE_SEP;
        Map.Delete(I, 1);
        Break;
      end;

    NewContents += Line + LINE_SEP;
  end;

  Map.Reverse();
  for I := 0 to High(Map) do
    NewContents := Map[I].DocComment + LINE_SEP*2 + NewContents;

  ClearSimbaOutput();
  WriteLn(NewContents);
  SetClipBoard(NewContents);
end.
